package progradle;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import com.stripe.Stripe;
import com.stripe.exception.StripeException;
import com.stripe.model.FileLink;
import com.stripe.model.reporting.ReportRun;
import com.stripe.model.reporting.ReportType;
import com.stripe.param.FileLinkCreateParams;
import com.stripe.param.reporting.ReportRunCreateParams;

class createreportinter implements Runnable
{
    public static String reportid="";
	@Override
	public void run() {
       Stripe.apiKey = "sk_test_51Ix4QYCDZ8SulOxCnKSj0mwT2kfdE2Dcl1HNnGqJkwf7KSvG6cuGPWn0eAdXFq8xfvfp0Gx71QT0xOfnYGOaY2In006JjZLOHs";
        try
        {
        ReportType reportType = ReportType.retrieve("balance.summary.1");
		ReportRunCreateParams report = ReportRunCreateParams.builder()
                    .setParameters(
                 		   ReportRunCreateParams.Parameters.builder()
                 		   .setCurrency("usd")
                 		   .setIntervalEnd(reportType.getDataAvailableEnd())
                 		   .setIntervalStart(reportType.getDataAvailableStart())
                 		   
                 		   .build()
                 		   )
                    .setReportType("balance.summary.1")
                    .build();
			
		    ReportRun reportcreate =  ReportRun.create(report);
		    reportid=reportcreate.getId();
		    
		    synchronized(this)
		    {
		    	while(!((reportcreate = ReportRun.retrieve(reportid)).getStatus().equals("succeeded")))
		    	{
		    		
		    	}
		    	this.notify();
		    }
        }
        catch(Exception e)
        {
        	e.printStackTrace();
        }
	}
	
}


class reportretrieve
{
	FileLink reportretrieve(String reportid) throws StripeException
	{
		Stripe.apiKey = "sk_test_51Ix4QYCDZ8SulOxCnKSj0mwT2kfdE2Dcl1HNnGqJkwf7KSvG6cuGPWn0eAdXFq8xfvfp0Gx71QT0xOfnYGOaY2In006JjZLOHs";
		ReportRun report = ReportRun.retrieve(reportid);
		System.out.println(report);
		FileLinkCreateParams params = FileLinkCreateParams.builder()
                .setFile(report.getResult().getId())
                .build();

        FileLink fileLink = FileLink.create(params);

        return fileLink;
	}
}


class fileoperations
{
	Connection con;
    fileoperations(String username,String password) throws SQLException, ClassNotFoundException
    {
        Class.forName("org.postgresql.Driver"); // loads the driver
	    
        con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/test", username, password);
    }
	void insert(FileLink url) throws IOException, SQLException
	{
		BufferedReader in = new BufferedReader(new InputStreamReader(new URL(url.getUrl()).openStream()));
		String line;
		boolean creation = false;
		while((line=in.readLine())!=null)
		{
			String cells[] = line.split(",");
			if(creation==false)
			{
				String query = "create table aaaaaaa ("+cells[0] +" varchar(100)," + cells[1] + "varchar(100)," + cells[2] + "float(50)," + cells[3] + "varchar(100));";
		    	Statement ps = con.createStatement();
		        ps.execute(query);
		        creation = true;
		        
		    }
			else
			{
				String query = "INSERT INTO aaaaaaa VALUES(?,?,?,?)";
	    		PreparedStatement ps = con.prepareStatement(query);
	    	 	
	    		String category = cells[0].replace("\"", "");
	    		String description = cells[1].replace("\"", "");
	    	
	    		
	    		ps.setString(1, category);
	    		ps.setString(2, description);
	    		
	    	    String floatvalue = cells[2].replace("\"", " ");
			    Float value = Float.parseFloat(floatvalue);
	    		
			    ps.setFloat(3, value);
			    if(cells.length==4)
			    {
			    	String currency = cells[3].replace("\"", "");
	    		    ps.setString(4, currency);
			    }
			    else {
			    	ps.setString(4, null);
			    }
	    		
	    	    ps.executeUpdate();
	    
			}
	}
	
	
}	
}

public class reportcreate {

	public static void main(String[] args) throws InterruptedException, StripeException, ClassNotFoundException, SQLException, IOException {
		
		createreportinter report = new createreportinter();
		Thread t = new Thread(report);
		t.start();
		synchronized(t)
		{
		t.wait();
		}
		
		reportretrieve reportretrieve = new reportretrieve();
		FileLink url = reportretrieve.reportretrieve(createreportinter.reportid);
		
		fileoperations fileoperation = new fileoperations("postgres","1234");
		
		fileoperation.insert(url);
		
		

	}

	}

